<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd        
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/tx 
     	http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	<tx:annotation-driven />
	<context:property-placeholder location="classpath:db.properties" />
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="initialSize">
			<value>${jdbc.initialSize}</value>
		</property>
		<property name="maxActive">
			<value>${jdbc.maxActive}</value>
		</property>
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="wall-filter" />
			</list>
		</property>
	</bean>
	
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="1000" />
		<property name="logSlowSql" value="true" />
		<property name="mergeSql" value="true" />
	</bean>

	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<property name="dbType" value="mysql" />
		<property name="config" ref="wall-filter-config" />
	</bean>

	<bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig">
		<property name="multiStatementAllow" value="true" />
	</bean>

	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.qiqiim.webserver.controller.*</value>
				<value>com.qiqiim.webserver.service.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
	</aop:config>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.qiqiim" />
	</bean>
	
<!--Redis和缓存配置开始 -->
<!-- 配置JedisPool -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <property name="maxTotal" value="${redis.maxActive}" />  
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
    </bean>  
      
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"></property>
		<property name="port" value="${redis.port}"></property>
		<property name="password" value="${redis.pass}"></property>
		<property name="timeout" value="${redis.timeout}"></property>
		<property name="poolConfig" ref="poolConfig"></property>
	</bean>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory"   ref="jedisConnectionFactory" />
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		</property>
	</bean>
    <!--缓存序列化方式 -->
<!--对key的默认序列化器。默认值是StringSerializer 调用连接池工厂配置-->
<!--<bean id="redisTemplate" name="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
<!--<property name="connectionFactory" ref="jedisConnectionFactory"/>-->
<!--<property name="keySerializer" ref="stringRedisSerializer"/>-->
<!--<property name="valueSerializer" ref="stringRedisSerializer"/>-->
<!--<property name="hashKeySerializer" ref="stringRedisSerializer"/>-->
<!--<property name="hashValueSerializer" ref="stringRedisSerializer"/>-->
<!--&lt;!&ndash; <propertyname="enableTransactionSupport" value="true"/> &ndash;&gt;-->
<!--</bean>-->

<!--<bean id="jdkredisTemplate" name="jdkredisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
<!--<property name="connectionFactory" ref="jedisConnectionFactory"/>-->
<!--<property name="keySerializer" ref="jdkSerializationRedisSerializer"/>-->
<!--<property name="valueSerializer" ref="jdkSerializationRedisSerializer"/>-->
<!--<property name="hashKeySerializer" ref="stringRedisSerializer"/>-->
<!--<property name="hashValueSerializer" ref="jackson2JsonRedisSerializer"/>-->
<!--</bean>-->

<!--<bean id="jacksonredisTemplate" name="jacksonredisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
<!--<property name="connectionFactory" ref="jedisConnectionFactory"/>-->
<!--<property name="keySerializer" ref="jackson2JsonRedisSerializer"/>&lt;!&ndash; 对于普通K-V操作时，key采取的序列化策略  &ndash;&gt;-->
<!--<property name="valueSerializer" ref="jackson2JsonRedisSerializer"/>&lt;!&ndash; value采取的序列化策略 &ndash;&gt;-->
<!--<property name="hashKeySerializer" ref="stringRedisSerializer"/>&lt;!&ndash; 在hash数据结构中，hash-key的序列化策略 &ndash;&gt;-->
<!--<property name="hashValueSerializer" ref="jackson2JsonRedisSerializer"/>&lt;!&ndash; hashValueSerializer：hash-value的序列化策略  &ndash;&gt;-->
<!--</bean>-->

<!--<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
<!--<bean id="jackson2JsonRedisSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>-->
<!--<bean id="jdkSerializationRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->

<!--Redis和缓存配置结束 -->
	 
</beans>